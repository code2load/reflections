1. What happens when you initialize a repository? Why do you need to do it?Git creates hidden files required to track the state of the repository.Without performing an init, git won't be able to commit and fully track files.â€”--2. How is the staging area different from the working directory and the repository? What value do you think it offers?The working directory is the current directory within the context of git, and files in this directory receive focus for git commands without specifying an explicit path. The repository includes additional state for tracking the status and history of all (committed) files under its umbrella, which may include directories, subdirectories, and files other than those in the working directory. The staging area might be thought of as an index, in which all such flagged files (via 'git add') are pooled together for a cohesive and logical commit operation. These files are essentially waiting backstage, and about to "perform" together through a potential commit to the codebase, but the curtain could also be closed. The staging area provides a convenient way to operate on a logical collection of files,and highlights these files of interest, so they stand out from other possible clutter in the working directory -- the "git status" command clearly indicates which files are in the staging area.3. How can you use the staging area to make sure you have one commit per logical change?Files can be added from the working area to the staging area using the "git add" command. When a "git commit" is performed, all of the files in the staging area are commited together, excluding possibly unrelated changes in the working area, which have not been staged. To ensure one commit per logical change, be sure to stage eachfile related to the change using "git add" prior to performing "git commit".---EOF