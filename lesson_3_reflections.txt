1. When would you want to use a remote repository rather than keeping all your work local?

A remote repository is desirable when you want to share with the public, allow access to collaborators, access your content from other devices, or to backup to the cloud.

---

2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

A manual pull is preferred so that changes pushed to GitHub by a collaborator don't conflict with local changes you may be making, or surprise you. You may also want to operate locally with a particular version, and not necessarilly the latest and greatest on the remote.

---

3. Describe the differences between forks, clones, and branches. When would you use one instead of another?

Both forks and clones make a copy of an entire repository, whereas a branch operation allows variation on an existing branch within a repository. A fork is most appropriate
to use when: you don’t have permission to modify a repository, you want to make a
copy of the entire repository, you want to give credit to the author you copied from, and you want to contribute to GitHub’s fork statistics. A clone won’t offer credit to the original author without explicit steps, and does not contribute to fork statistics. If the ultimate goal is to make the repository copy available on GitHub, a fork can do so in fewer steps, rather than cloning, creating a new repository, and then pushing to synchronize. A branch is appropriate when you want to make a variation from a particular commit within an existing repository, say to add an experimental feature. 

4. What is the benefit of having a copy of the last known state of the remote stored locally?

This allows git to compare current state of remote to determine if there are commits on the remote not yet reflected on the local.

---

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without Git, GitHub, or other version control tool, collaboration would be harder, especially when more than one collaborator is making changes to the same file at the same time. One primitive way to collaborate otherwise, would be to establish a policy where only one developer can update files at a time, and where files are flagged by a developer when they are working on them, so that other developers don't attempt to make changes at the same time. This manual "semaphore" approach could be enforced by verbal or written agreement, or by setting permissions on a file. Files could be stored on the cloud accessible to all, or changed files emailed or ftp'd to a moderator whose responsibility it is to update the code base with the submitted changes. It would be possible to allow more than one developer to modify a file at a time, but would require: a convention to avoid overwrite, a means to compare files for changes, resolve conflicts, and merge changes. In some cases, the non-git approach could be easier for those not familiar with git/GitHub, when there is a small number of developers working on mostly disjoint files for a simple project. 

---

6. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

It is much simpler and takes fewer steps to make changes directly in master. However,
making changes in a separate branch can be useful for collaboration, and used in conjunction with a GitHub pull request to allow another collaborator to review the proposed changes prior to accepting and merging the branch. Even without collaboration, a separate branch can come in handy, for making experimental changes, or making a specialized version of a project. 

EOF

